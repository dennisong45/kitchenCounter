package main

import (
    "context"
    "fmt"
    "log"
    "time"
    
    "cloud.google.com/go/cloudsqlconn"
    "gorm.io/driver/postgres"
    "gorm.io/gorm"
)

func main() {
    // Create a new context
    ctx := context.Background()

    // Configure your instance connection name in the format project:region:instance
    instanceConnectionName := "your-project-id:your-region:your-instance-id"

    // Use the Cloud SQL Connector to establish a connection
    connector, err := cloudsqlconn.NewConnector(ctx, instanceConnectionName, cloudsqlconn.WithIAMAuthN())
    if err != nil {
        log.Fatalf("failed to create connector: %v", err)
    }
    defer connector.Close()

    // Now you can configure the connection string with the connector
    postgresqlDbInfo := fmt.Sprintf("user=your-username password=your-password dbname=your-db-name sslmode=disable")
    
    // Establish connection with the connector
    db, err := sql.OpenDB(connector, postgresqlDbInfo)
    if err != nil {
        log.Fatalf("failed to connect to the database: %v", err)
    }

    // Use GORM with the DB connection
    gormDB, err := gorm.Open(postgres.New(postgres.Config{
        Conn: db,
    }), &gorm.Config{})
    
    if err != nil {
        log.Fatalf("failed to set up gorm: %v", err)
    }

    // Ping the database to check the connection
    ctx, cancel := context.WithTimeout(ctx, 10*time.Second)
    defer cancel()

    if err := db.PingContext(ctx); err != nil {
        log.Fatalf("failed to ping database: %v", err)
    }

    fmt.Println("Successfully connected to the Cloud SQL instance!")
}

package main

import (
    "context"
    "log"
    "net"

    "cloud.google.com/go/cloudsqlconn"
    "github.com/jackc/pgx/v5/pgxpool"
    "gorm.io/driver/postgres"
    "gorm.io/gorm"
)

func connect() (*gorm.DB, func(), error) {
    // Set up your connection string (DSN)
    dsn := "user=myuser password=mypass dbname=mydb sslmode=disable"
    config, err := pgxpool.ParseConfig(dsn)
    if err != nil {
        return nil, nil, err
    }

    // Create a new Cloud SQL dialer
    dialer, err := cloudsqlconn.NewDialer(context.Background())
    if err != nil {
        return nil, nil, err
    }

    // Set the DialFunc for pgxpool to use the Cloud SQL Connector
    config.ConnConfig.DialFunc = func(ctx context.Context, _ string, instance string) (net.Conn, error) {
        return dialer.Dial(ctx, "project:region:instance") // Replace with your project info
    }

    // Create a pgxpool using the configured connection
    pool, err := pgxpool.NewWithConfig(context.Background(), config)
    if err != nil {
        return nil, nil, err
    }

    // Integrate the pgxpool with Gorm
    gormDB, err := gorm.Open(postgres.New(postgres.Config{
        Conn: pool,
    }), &gorm.Config{})
    if err != nil {
        return nil, nil, err
    }

    // Define a cleanup function to close the Cloud SQL dialer and connection pool when done
    cleanup := func() {
        pool.Close()
        dialer.Close()
    }

    // Return the Gorm DB instance and cleanup function
    return gormDB, cleanup, nil
}

func main() {
    // Connect to the database
    db, cleanup, err := connect()
    if err != nil {
        log.Fatalf("failed to connect to the database: %v", err)
    }
    defer cleanup()

    // Use Gorm `db` as you normally would
    // For example: db.AutoMigrate(&YourModel{})
    log.Println("Connected to the Cloud SQL instance successfully!")
}

